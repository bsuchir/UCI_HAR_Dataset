install.packages("Slide")
library("swirl")
swirl()
x<-C(44,NA,5,NA)
x<-c(44,NA,5,NA)
y<-x*3
x * 3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data <-sample(c(y,z),100)
my_na = is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data ==NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
y>0
x[x>0]
x[!is.na(x)&x>0]
c(x[3],x[5],x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-c(1:20)
my_vector<-(1:20)
1:20
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <-my_vector
?matrix
my_matrix2 <-matrix(data=1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
>colnames(my_data,cnames)
colnames(my_data,cnames)
?colnames
colnames(my_data)<-cnames
my_data
exit
kill
kill -1 -1
library(swirl)
swirl()
true==TRUE
TRUE==TRUE
(FALSE==TRUE)==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!TRUE
5!=7
5==7
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 >8 || 6!=8 && 4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(true,false)
xor(5==6,!FALSE)
int<-sample(10)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
source('/var/folders/76/1q41h_yj1mbgz3qm9x5k12xc0000gn/T//RtmpK8KtAh/boring_function.R')
source('/var/folders/76/1q41h_yj1mbgz3qm9x5k12xc0000gn/T//RtmpK8KtAh/boring_function.R')
submit
invisible()
source('/var/folders/76/1q41h_yj1mbgz3qm9x5k12xc0000gn/T//RtmpK8KtAh/boring_function.R')
submit
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("programming","is","fun!")
paste("Programming","is","fun!")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
telegram("Good","Morning")
submit()
mod_libs("Hawai,"black","pan")
mod_libs("Hawai","black","pan")
mad_libs("Hawai","black","pan")
submit()
%p%("I","Love","R")
%p%("I","Love")
info()
%p%("I","Love")
nxt()
paste('I','Love')
'I' %p% 'love' %p% 'R!'
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3="October 17, 1986 08:24"
t3<-"October 17, 1986 08:24"
t4<-strptime(t3,"%B %d %Y %H:%M")
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() >t1
Sys.time() -t1
difftime(Sys.time(),t1,units='days')
exit
Data<-read.csv("/Users/suchir/Desktop/RO_RMU_Sales_Data_11_07_2017.csv", stringsAsFactors = F)
View(Data)
names(Data)
any(is.na(Data))
any(is.na(Data$Jan.17))
any(Data$Jan.17==0)
any(is.na(Data$Jan.17.1))
any(Data$Jan.17.1==0)
Data<-read.csv("/Users/suchir/Desktop/RO_RMU_Sales_Data_11_07_2017.csv", stringsAsFactors = F)
any(Data$Jan.17.1==0)
names(Data)
Data$Jan.17.1<-ifelse(Data$Jan.17.1==0,NA,Data$Jan.17.1)
Data$Mar.17.1<-ifelse(Data$Mar.17.1==0,NA,Data$Mar.17.1)
Data$Apr.17.1<-ifelse(Data$Apr.17.1==0,NA,Data$Apr.17.1)
Data$Feb.17.1<-ifelse(Data$Feb.17.1==0,NA,Data$Feb.17.1)
Data$May.17.1<-ifelse(Data$May.17.1==0,NA,Data$May.17.1)
Data$Jun.17.1<-ifelse(Data$Jun.17.1==0,NA,Data$Jun.17.1)
Mean_Jan<-mean(Data$Jun.17.1,na.rm = T)
Mean_Jan
Mean_Jan<-mean(Data$Jun.17.1,na.rm = T)
Mean_Feb<-mean(Data$Feb.17.1,na.rm = T)
Mean_Mar<-mean(Data$Mar.17.1,na.rm = T)
Mean_Apr<-mean(Data$Apr.17.1,na.rm = T)
Mean_May<-mean(Data$May.17.1,na.rm = T)
Mean_Jun<-mean(Data$Jun.17.1,na.rm = T)
sd_Jan<-sd(Data$Jun.17.1,na.rm = T)
sd_Feb<-sd(Data$Feb.17.1,na.rm = T)
sd_Mar<-sd(Data$Mar.17.1,na.rm = T)
sd_Apr<-sd(Data$Apr.17.1,na.rm = T)
sd_May<-sd(Data$May.17.1,na.rm = T)
sd_Jun<-sd(Data$Jun.17.1,na.rm = T)
Data$Jan_Normalised<-(Data$Jan.17.1-Mean_Jan)/sd_Jan
Data$Jan_Normalised<-(Data$Jan.17.1-Mean_Jan)/sd_Jan
Data$Feb_Normalised<-(Data$Feb.17.1-Mean_Feb)/sd_Feb
Data$Mar_Normalised<-(Data$Mar.17.1-Mean_Mar)/sd_Mar
Data$Apr_Normalised<-(Data$Apr.17.1-Mean_Apr)/sd_Apr
Data$May_Normalised<-(Data$May.17.1-Mean_May)/sd_May
Data$Jun_Normalised<-(Data$Jun.17.1-Mean_Jun)/sd_Jun
View(Data)
Data$First_3_Month_Normalised_Average<-mean(Data$Jan_Normalised,Data$Feb_Normalised,Data$Mar_Normalised,na.rm = T)
class(Data$Jan_Normalised)
for(i in 1:nrow(Data))
{
Data[i,"First_3_Month_Normalised_Average"]<-mean(Data[i,"Jan_Normalised"],Data[i,"Feb_Normalised"],Data[i,"Mar_Normalised"],na.rm = T)
Data[i,"Last_3_Month_Normalised_Average"]<-mean(Data[i,"Apr_Normalised"],Data[i,"May_Normalised"],Data[i,"Jun_Normalised"],na.rm = T)
}
i
Data[i,"Jan_Normalised"]
Data[i,"Feb_Normalised"]
Data[i,"Mar_Normalised"]
mean(3,NA,2,na.rm = T)
mean(c(3,2,NA),na.rm = T)
for(i in 1:nrow(Data))
{
Data[i,"First_3_Month_Normalised_Average"]<-mean(c(Data[i,"Jan_Normalised"],Data[i,"Feb_Normalised"],Data[i,"Mar_Normalised"]),na.rm = T)
Data[i,"Last_3_Month_Normalised_Average"]<-mean(c(Data[i,"Apr_Normalised"],Data[i,"May_Normalised"],Data[i,"Jun_Normalised"]),na.rm = T)
}
mean(c(2,NA,3),na.rm = T)
Data$Perc_Change_Normalised<-(Data$Last_3_Month_Normalised_Average-Data$First_3_Month_Normalised_Average)/Data$First_3_Month_Normalised_Average
Data$Accept<-ifelse(Data$Perc_Change_Normalised<(-.15),"No","Approve")
table(Data$Accept)
any(is.na(Data$Perc_Change_Normalised))
length(which(is.na(Data$Perc_Change_Normalised)))
View(Data)
install.packages("xlsx")
install.packages("xlsx")
library("xlsx")
install.packages("rJava")
library("rJava")
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
install.packages("xlsx")
install.packages("xlsx")
library("xlsx")
install.packages("rJava")
library("rJava")
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
library("swirl")
rm(list=ls())
swirl()
?read.csv
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time())
select(cran,-time)
X:size
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version="3.1.1",country="US")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,country=="India",r_version<"3.0.2")
filter(cran,country=="IN",r_version<="3.0.2")
filter(cran,country=="US"|country=="IN")
filter(cran,size>100500,r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
cran3<-mutate(cran3,correct_size=size+1000)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
rm(list=ls())
library("swirl")
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package="lubridate")
help(package=lubridate)
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy("25081985")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours=8,minutes=34,seconds=55)
this_moment
this_moment<-update(this_moment,hms(now()))
this_moment<-update(this_moment,hms(now()))
hms(now())
HMS(now())
now()
hms(now())
this_moment<-update(this_moment,hours=23,minutes=20,seconds=30)
this_moment
?now
nyc <-now(tzone="America/New_York")
nyc
depart <- nyc+days(2)
depart
depart <-update(depart,h=17,m=34)
depart <-update(depart,hours=17,minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive,tzone="Asia/Hong_Kong")
arrive<-with_tz(arrive,tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("June,17,2008")
last_time <- mdy("June,17,2008", tz="Singapore")
last_time <- mdy("June 17,2008", tz="Singapore")
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?interval()
?interval
how_long<-interval(last_time, arrive)
as.period(how_long)
stopwatch()
rm(list=ls())
setwd("/Users/suchir/Documents/GitHub/UCI_HAR_Dataset/")
dir()
getwd()
dir()
source("Runfiles.r")
source('~/Documents/GitHub/UCI_HAR_Dataset/Runfiles.r')
View(tidy_data)
source('~/Documents/GitHub/UCI_HAR_Dataset/Runfiles.r')
colnames(tidy_data)
write.table(colnames(tidy_data),"codebook.md")
